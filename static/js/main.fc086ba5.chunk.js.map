{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","text","target","value","submitUrl","preventDefault","handleClick","bind","assertThisInitialized","react_default","a","createElement","className","autoFocus","type","placeholder","url","onChange","onClick","Component","App","changeUrl","console","log","state","setState","prevState","fetchImage","imgUrl","exec","newmq","newhq","newmaxres","mq","hq","maxres","maxRes","Fragment","href","src_Form","rel","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc086ba5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.scss';\r\n\r\nclass Form extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.submitUrl=this.submitUrl.bind(this);\r\n    this.handleChange=this.handleChange.bind(this);\r\n  }\r\n  handleChange=(e)=>{\r\n      let text=e.target.value;\r\n      this.props.handleChange(text);\r\n  }\r\n\r\n  submitUrl=(e)=>{\r\n    e.preventDefault();\r\n    this.props.handleClick();\r\n    //console.log(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <form  className=\"Form\">\r\n          <input\r\n            autoFocus\r\n            className=\"Input\"\r\n            type=\"text\"placeholder=\"Enter Youtube URL\"\r\n            value={this.props.url}\r\n            onChange={this.handleChange}\r\n            >\r\n          </input>\r\n          &nbsp;\r\n          <button\r\n            className=\"Button\"\r\n            type=\"submit\"\r\n            onClick={this.submitUrl}\r\n          >\r\n            GET\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\nimport './App.scss';\n\nimport Form from './Form.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      url:\"\",\n      imgUrl:\"\",\n      mq:\"\",\n      hq:\"\",\n      maxRes:\"\"\n    }\n    this.changeUrl=this.changeUrl.bind(this);\n    this.fetchImage=this.fetchImage.bind(this);\n  }\n\n  changeUrl=(text)=>{\n    console.log(this.state.url);\n    this.setState((prevState)=>({\n      url:text\n    }));\n  }\n\n  fetchImage=()=>{\n    if(this.state.url){\n      let aaa = /(.*)(com|be)\\/(watch\\?v=)?(.{11})[?|&]?.*/g;\n      let imgUrl = aaa.exec(this.state.url)[4];\n      //console.log(`${imgUrl}`);\n      //console.log(\"Fetching Image for \"+this.state.url);\n      let newmq=\"https://i.ytimg.com/vi/\"+imgUrl+\"/mqdefault.jpg\";\n      let newhq=\"https://i.ytimg.com/vi/\"+imgUrl+\"/hqdefault.jpg\";\n      let newmaxres=\"https://i.ytimg.com/vi/\"+imgUrl+\"/maxresdefault.jpg\";\n      //console.log(newImgUrl);\n      this.setState((prevState)=>({\n        mq: newmq,\n        hq: newhq,\n        maxres: newmaxres\n      }))\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {\n            !this.state.hq?\n            <div className=\"appTitle\">\n            <a href=\"http://surajk95.github.io/\">\n              <div className=\"appName\">YtGrabber</div>\n              by surajk95\n              </a>\n          </div>\n        :\n        <></>\n        }\n          <div>\n            <Form\n              url={this.state.url}\n              handleChange={this.changeUrl}\n              handleClick={this.fetchImage}\n             />\n          </div>\n        </header>\n         {this.state.hq?\n         <div>\n           Click on an image to download.\n           <div className=\"results-container\">\n            <div><span className=\"qualHeader\">Max-resolution</span><br/><a href={this.state.maxres} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img className=\"img-container\" alt=\"maxres\" src={this.state.maxres}/></a>\n            </div>\n            <div><span className=\"qualHeader\">Hq-resolution</span><br/><a href={this.state.hq} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img className=\"img-container\" alt=\"hq\" src={this.state.hq}/></a>\n            </div>\n           </div>\n          </div>\n          : <div></div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}